{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       Clawbot+.cpp                                              */\n/*    Author:       RocketDeveloper                                           */\n/*    Created:      4/24/25                                                   */\n/*    Description:  TSA Clawbot Code V2! The more Pure Version!               */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//Define Controller and Brain\ncontroller Control = controller();\nbrain Cortex = brain();\n\n//Define Motors -- Change [Port, Reversed]\n\n  //--Drivetrain/Chassis--\nmotor FrontLeftWheel = motor(PORT19, ratio18_1);\nmotor FrontRightWheel = motor(PORT9, ratio18_1, true);\nmotor BackRightWheel = motor(PORT10, ratio18_1, true);\nmotor BackLeftWheel = motor(PORT20, ratio18_1);\n\n  //--Arm/Claw/Winch--\nmotor ArmMotor1 = motor(PORT18, ratio18_1);\nmotor ArmMotor2 = motor(PORT8,ratio18_1, true);\nmotor ArmMotor3 = motor(PORT17, ratio18_1);\nmotor ArmMotor4 = motor(PORT7, ratio18_1, true);\nmotor29 ClawMotor = motor29(Cortex.ThreeWirePort.A);\n\n\n//Define Motor Groups - Move Simultaneously\nmotor_group LeftDrive = motor_group(FrontLeftWheel, BackLeftWheel);\nmotor_group RightDrive = motor_group(FrontRightWheel, BackRightWheel);\nmotor_group ArmMotors = motor_group(ArmMotor1, ArmMotor2, ArmMotor3, ArmMotor4);\n\n//Speedmode [3 Def Values: P: (Presision; Axis/4), N: (Normal; Axis/2), S: (Speedrun; Axis/1) - Percentage Units]\nchar SpeedMode = 'N';\n\n//Functions\nvoid TaskKill(){ //Stop Robot program\n  Brain.programStop();\n}\n\nvoid WriteScreen(){\n  //Line 1: Speed Mode\n  if (SpeedMode == 'N'){\n    Control.Screen.setCursor(1,1); \n    Control.Screen.clearLine(1);\n    Control.Screen.print(\"Normal\");\n  }else if (SpeedMode == 'S'){ \n    Control.Screen.setCursor(1,1); \n    Control.Screen.clearLine(1);\n    Control.Screen.print(\"Overdrive\");\n  }else if (SpeedMode == 'P'){ \n    Control.Screen.setCursor(1,1); \n    Control.Screen.clearLine(1);\n    Control.Screen.print(\"Prescision\");\n  }\n}\n\nvoid Normal(){\n SpeedMode = 'N';\n Control.rumble(rumbleShort);\n WriteScreen();\n}\nvoid Speedrun(){\n SpeedMode = 'S';\n Control.rumble(rumbleShort);\n WriteScreen();\n}\nvoid Prescision(){ \n SpeedMode = 'P';\n Control.rumble(rumbleShort);\n WriteScreen();\n}\n\n\n//Main Functionality\nint main() {\n  // Initializing Robot Configuration\n  vexcodeInit();\n  //Button Functionality\n\n  WriteScreen();\n  Control.ButtonA.pressed(Speedrun);\n  Control.ButtonX.pressed(Normal);\n  Control.ButtonY.pressed(Prescision); \n  Control.ButtonUp.pressed(TaskKill);\n\n\n  // Joystick Functionality (Axis 3(UD) and 4 (LR) on Left Joystick)\n  //Left Drive = (Axis 3 + Axis 4)/SpeedDivisor\n  //Right Drive = (Axis 3 - Axis 4)/SpeedDivisor\n\n  while (1==1) {\n    wait(5, msec); // Buffer - Don't waste Resources\n\n\n   \n    //Drivetrain Functionality\n    if (SpeedMode == 'N'){\n      //Normal Speed - Joystick Input is cut in half\n      RightDrive.setVelocity((Control.Axis3.position() - Control.Axis4.position())/2,percent);\n      LeftDrive.setVelocity((Control.Axis3.position() + Control.Axis4.position())/2,percent);\n      LeftDrive.spin(forward);\n      RightDrive.spin(forward);\n    } else if (SpeedMode == 'P') {\n      //Prescision Speed - Joystick Input is cut in fourths\n      LeftDrive.setVelocity((Control.Axis3.position() + Control.Axis4.position())/4,percent);\n      RightDrive.setVelocity((Control.Axis3.position() - Control.Axis4.position())/4,percent);\n      LeftDrive.spin(forward);\n      RightDrive.spin(forward);\n    } else if (SpeedMode == 'S'){\n      //Overdrive Mode - Joystick Input is not cut (Maximum Speed Differential)\n      LeftDrive.setVelocity((Control.Axis3.position() + Control.Axis4.position()),percent);\n      RightDrive.setVelocity((Control.Axis3.position() - Control.Axis4.position()),percent);\n      LeftDrive.spin(forward);\n      RightDrive.spin(forward);\n    }else{ \n      LeftDrive.setStopping(coast);\n      RightDrive.setStopping(coast);\n      RightDrive.stop(); \n      LeftDrive.stop();\n    } \n\n    //Arm Functionality\n    if (Control.Axis2.position() != 0){\n      ArmMotors.setVelocity(Control.Axis2.position(), percent);\n      ArmMotors.spin(forward);\n    }else{\n      ArmMotors.setStopping(brake);\n      ArmMotors.stop();\n    }\n\n    //Claw Functionality\n    if (Control.ButtonL1.pressing() == true){\n      ClawMotor.setVelocity(100,percent); \n      ClawMotor.spin(forward);\n    }else if (Control.ButtonR1.pressing() == true){\n      ClawMotor.setVelocity(100,percent); \n      ClawMotor.spin(reverse);\n    }else{   \n      ClawMotor.stop();\n    }\n  }\n}","textLanguage":"cpp","robotConfig":[],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}